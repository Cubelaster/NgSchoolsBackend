// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NgSchoolsDataLayer.Context;

namespace NgSchoolsDataLayer.Migrations
{
    [DbContext(typeof(NgSchoolsContext))]
    [Migration("20190203144453_Allow_plan_In_EducationProgram")]
    partial class Allow_plan_In_EducationProgram
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.BusinessPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int?>("CityId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Oib");

                    b.Property<string>("Phone");

                    b.Property<int?>("RegionId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("BusinessPartners");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longtitude");

                    b.Property<string>("Name");

                    b.Property<string>("NameDomestic");

                    b.Property<int>("RegionId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.ClassLocations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CityId");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("RegionId");

                    b.Property<int>("Status");

                    b.Property<string>("Telephone");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("ClassLocations");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.ClassType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("ClassTypes");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.ContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessPartnerId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("Mobile");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.ToTable("ContactPeople");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alpha2Code");

                    b.Property<string>("Alpha3Code");

                    b.Property<int?>("CountryCallingCode");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int?>("InternationalDiallingPrefix");

                    b.Property<string>("Name");

                    b.Property<string>("NameDomestic");

                    b.Property<int>("Status");

                    b.Property<int?>("UnCode");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Diary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class");

                    b.Property<Guid?>("ClassOfficerId");

                    b.Property<int?>("ClassTypeId");

                    b.Property<DateTime?>("CloseDate");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int?>("EducationGroupId");

                    b.Property<Guid?>("EducationLeaderId");

                    b.Property<string>("EducationProgramType");

                    b.Property<string>("EducationalGroupMark");

                    b.Property<DateTime>("EducationalPeriod");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("OpenDate");

                    b.Property<string>("PerformingWay");

                    b.Property<string>("SchoolYear");

                    b.Property<int>("Status");

                    b.Property<int?>("TeachingPlaceId");

                    b.HasKey("Id");

                    b.HasIndex("ClassOfficerId");

                    b.HasIndex("ClassTypeId");

                    b.HasIndex("EducationGroupId");

                    b.HasIndex("EducationLeaderId");

                    b.HasIndex("TeachingPlaceId");

                    b.ToTable("Diaries");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.DiaryStudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("DiaryId");

                    b.Property<int>("Status");

                    b.Property<int>("StudentGroupId");

                    b.HasKey("Id");

                    b.HasIndex("DiaryId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("DiaryStudentGroups");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.EducationGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("EducationGroups");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Autonomy");

                    b.Property<string>("CognitiveSkills");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("KnowledgeBase");

                    b.Property<string>("Level")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PsychomotorSkills");

                    b.Property<string>("Responsibility");

                    b.Property<string>("SocialSkills");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.EducationProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgencyApprovalClass");

                    b.Property<DateTime?>("AgencyProgramDate");

                    b.Property<string>("AgencyUrNumber");

                    b.Property<string>("ApprovalClass");

                    b.Property<string>("CIClassesGroup");

                    b.Property<string>("CIClassesIndividual");

                    b.Property<string>("CIClassesPractical");

                    b.Property<string>("ComplexityLevel");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int?>("EducationGroupId");

                    b.Property<string>("EnrollmentConditions");

                    b.Property<string>("KnoweledgeVerification");

                    b.Property<string>("Name");

                    b.Property<string>("PerformingWay");

                    b.Property<string>("ProgramCompetencies");

                    b.Property<string>("ProgramDate");

                    b.Property<double?>("ProgramDuration");

                    b.Property<double?>("ProgramDurationDays");

                    b.Property<string>("ProgramDurationTextual");

                    b.Property<string>("ProgramJustifiability");

                    b.Property<string>("RegularClassesPractical");

                    b.Property<string>("RegularClassesTeoretical");

                    b.Property<string>("ShorthandName");

                    b.Property<int>("Status");

                    b.Property<string>("UrNumber");

                    b.Property<string>("WorkingEnvironment");

                    b.HasKey("Id");

                    b.HasIndex("EducationGroupId");

                    b.ToTable("EducationPrograms");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.EducationProgramClassType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassTypeId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("EducationProgramId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ClassTypeId");

                    b.HasIndex("EducationProgramId");

                    b.ToTable("EducationProgramClassTypes");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.ExamCommission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("ExamCommissions");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CityId");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("InstitutionClassFirstPart")
                        .IsRequired();

                    b.Property<string>("InstitutionClassSecondPart")
                        .IsRequired();

                    b.Property<string>("InstitutionCode")
                        .IsRequired();

                    b.Property<string>("InstitutionUrNumber")
                        .IsRequired();

                    b.Property<int?>("LogoId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PrincipalId");

                    b.Property<int>("RegionId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.HasIndex("LogoId");

                    b.HasIndex("PrincipalId");

                    b.HasIndex("RegionId")
                        .IsUnique();

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int?>("EducationProgramId");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EducationProgramId")
                        .IsUnique()
                        .HasFilter("[EducationProgramId] IS NOT NULL");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.PlanDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("PlanId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanDays");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.PlanDaySubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("PlanDayId");

                    b.Property<int>("Status");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("PlanDayId");

                    b.HasIndex("SubjectId");

                    b.ToTable("PlanDaySubjects");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.PlanDaySubjectTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<double>("HoursNumber");

                    b.Property<int>("PlanDaySubjectId");

                    b.Property<int>("Status");

                    b.Property<int>("ThemeId");

                    b.HasKey("Id");

                    b.HasIndex("PlanDaySubjectId");

                    b.HasIndex("ThemeId");

                    b.ToTable("PlanDaySubjectThemes");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Name");

                    b.Property<string>("NameDomestic");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressCityId");

                    b.Property<int?>("AddressCountryId");

                    b.Property<string>("AddressMuncipality");

                    b.Property<int?>("AddressRegionId");

                    b.Property<string>("AddressStreet");

                    b.Property<bool>("BirthCertificate");

                    b.Property<string>("CertificateNumber");

                    b.Property<string>("Citizenship");

                    b.Property<bool>("CitizenshipCertificate");

                    b.Property<string>("Cob");

                    b.Property<bool>("CompletedSchoolCertificate");

                    b.Property<string>("Couob");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("Dob");

                    b.Property<bool>("DoctorCertification");

                    b.Property<bool>("DriversLicence");

                    b.Property<bool>("EducationContract");

                    b.Property<string>("Email");

                    b.Property<bool>("Employed");

                    b.Property<string>("EmployerAddress");

                    b.Property<bool>("EmployerApplicationAttendant");

                    b.Property<int?>("EmployerCityId");

                    b.Property<int?>("EmployerCountryId");

                    b.Property<string>("EmployerEmail");

                    b.Property<string>("EmployerMobile");

                    b.Property<string>("EmployerName");

                    b.Property<string>("EmployerOib");

                    b.Property<string>("EmployerPhone");

                    b.Property<int?>("EmployerRegionId");

                    b.Property<DateTime?>("EnrolmentDate");

                    b.Property<string>("FathersFullName");

                    b.Property<bool>("FinalExam");

                    b.Property<string>("FinishedSchool");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("Gdpr");

                    b.Property<string>("Gender");

                    b.Property<bool>("IdCard");

                    b.Property<bool>("KnowledgeTest");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mentor");

                    b.Property<string>("Mob");

                    b.Property<string>("Mobile");

                    b.Property<string>("MothersFullName");

                    b.Property<string>("Notes");

                    b.Property<string>("Oib");

                    b.Property<int?>("PhotoId");

                    b.Property<string>("Pob");

                    b.Property<bool>("PractiacalTrainingContract");

                    b.Property<bool>("PracticeDiary");

                    b.Property<string>("Proffesion");

                    b.Property<string>("SchoolLevel");

                    b.Property<int>("Status");

                    b.Property<string>("Vocation");

                    b.HasKey("Id");

                    b.HasIndex("AddressCityId");

                    b.HasIndex("AddressCountryId");

                    b.HasIndex("AddressRegionId");

                    b.HasIndex("EmployerCityId");

                    b.HasIndex("EmployerCountryId");

                    b.HasIndex("EmployerRegionId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.StudentClassAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Attendance");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("Status");

                    b.Property<int>("StudentGroupClassAttendanceId");

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupClassAttendanceId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClassAttendances");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.StudentFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("FileId");

                    b.Property<int>("Status");

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentFiles");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.StudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassLocationId");

                    b.Property<DateTime>("CredentialDate");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid?>("EducationLeaderId");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime?>("EnrolmentDate");

                    b.Property<int?>("ExamCommissionId");

                    b.Property<DateTime>("FirstExamDate");

                    b.Property<string>("Notes");

                    b.Property<int>("ProgramId");

                    b.Property<DateTime>("SecondExamDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ClassLocationId");

                    b.HasIndex("EducationLeaderId");

                    b.HasIndex("ExamCommissionId");

                    b.HasIndex("ProgramId");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.StudentGroupClassAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("Status");

                    b.Property<int>("StudentGroupId");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("StudentGroupClassAttendances");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.StudentGroupSubjectTeachers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("Status");

                    b.Property<int>("StudentGroupId");

                    b.Property<int>("SubjectId");

                    b.Property<Guid>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("StudentGroupSubjectTeachers");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.StudentsInGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("Status");

                    b.Property<int>("StudentGroupId");

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentsInGroups");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CollectiveConsultations");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("EducationProgramId");

                    b.Property<int?>("IndividualConsultations");

                    b.Property<int?>("InstConsultations");

                    b.Property<string>("Literature");

                    b.Property<string>("MaterialConditions");

                    b.Property<string>("Name");

                    b.Property<int?>("PracticalClasses");

                    b.Property<string>("StaffingConditions");

                    b.Property<int>("Status");

                    b.Property<string>("SubjectCompetence");

                    b.Property<int?>("TheoreticalClasses");

                    b.Property<string>("WorkMethods");

                    b.HasKey("Id");

                    b.HasIndex("EducationProgramId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int?>("HoursNumber");

                    b.Property<string>("LearningOutcomes");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<int>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("FileName");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.UserDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Authorization");

                    b.Property<int?>("AvatarId");

                    b.Property<string>("Bank");

                    b.Property<string>("Certificates");

                    b.Property<string>("City");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("EmploymentPlace");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Iban");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MiddleName");

                    b.Property<string>("Mobile");

                    b.Property<string>("Mobile2");

                    b.Property<string>("Notes");

                    b.Property<string>("Oib");

                    b.Property<string>("Phone");

                    b.Property<bool>("PpEducation");

                    b.Property<string>("Profession");

                    b.Property<string>("Qualifications");

                    b.Property<int?>("SignatureId");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("SignatureId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.UserExamCommission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("ExamCommissionId");

                    b.Property<int>("Status");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ExamCommissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserExamCommission");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.UserRoles", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.BusinessPartner", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("NgSchoolsDataLayer.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("NgSchoolsDataLayer.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.City", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NgSchoolsDataLayer.Models.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.ClassLocations", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NgSchoolsDataLayer.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NgSchoolsDataLayer.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.ContactPerson", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.BusinessPartner", "BusinessPartner")
                        .WithMany("BusinessPartnerContacts")
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Diary", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.User", "ClassOfficer")
                        .WithMany()
                        .HasForeignKey("ClassOfficerId");

                    b.HasOne("NgSchoolsDataLayer.Models.ClassType", "ClassType")
                        .WithMany()
                        .HasForeignKey("ClassTypeId");

                    b.HasOne("NgSchoolsDataLayer.Models.EducationGroups", "EducationGroup")
                        .WithMany()
                        .HasForeignKey("EducationGroupId");

                    b.HasOne("NgSchoolsDataLayer.Models.User", "EducationLeader")
                        .WithMany()
                        .HasForeignKey("EducationLeaderId");

                    b.HasOne("NgSchoolsDataLayer.Models.ClassLocations", "TeachingPlace")
                        .WithMany()
                        .HasForeignKey("TeachingPlaceId");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.DiaryStudentGroup", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.Diary", "Diary")
                        .WithMany("StudentGroups")
                        .HasForeignKey("DiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NgSchoolsDataLayer.Models.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.EducationProgram", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.EducationGroups", "EducationGroup")
                        .WithMany()
                        .HasForeignKey("EducationGroupId");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.EducationProgramClassType", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.ClassType", "ClassType")
                        .WithMany()
                        .HasForeignKey("ClassTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NgSchoolsDataLayer.Models.EducationProgram", "EducationProgram")
                        .WithMany("EducationProgramClassTypes")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Institution", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NgSchoolsDataLayer.Models.Country", "Country")
                        .WithOne()
                        .HasForeignKey("NgSchoolsDataLayer.Models.Institution", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NgSchoolsDataLayer.Models.UploadedFile", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId");

                    b.HasOne("NgSchoolsDataLayer.Models.User", "Principal")
                        .WithMany()
                        .HasForeignKey("PrincipalId");

                    b.HasOne("NgSchoolsDataLayer.Models.Region", "Region")
                        .WithOne()
                        .HasForeignKey("NgSchoolsDataLayer.Models.Institution", "RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Plan", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.EducationProgram", "EducationProgram")
                        .WithOne("Plan")
                        .HasForeignKey("NgSchoolsDataLayer.Models.Plan", "EducationProgramId");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.PlanDay", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.Plan", "Plan")
                        .WithMany("PlanDays")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.PlanDaySubject", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.PlanDay", "PlanDay")
                        .WithMany("Subjects")
                        .HasForeignKey("PlanDayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NgSchoolsDataLayer.Models.Subject", "Subject")
                        .WithMany("PlanDaySubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.PlanDaySubjectTheme", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.PlanDaySubject", "PlanDaySubject")
                        .WithMany("PlanDaySubjectThemes")
                        .HasForeignKey("PlanDaySubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NgSchoolsDataLayer.Models.Theme", "Theme")
                        .WithMany("PlanDaySubjectThemes")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Region", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Student", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.City", "AddressCity")
                        .WithMany()
                        .HasForeignKey("AddressCityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NgSchoolsDataLayer.Models.Country", "AddressCountry")
                        .WithMany()
                        .HasForeignKey("AddressCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NgSchoolsDataLayer.Models.Region", "AddressRegion")
                        .WithMany()
                        .HasForeignKey("AddressRegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NgSchoolsDataLayer.Models.City", "EmployerCity")
                        .WithMany()
                        .HasForeignKey("EmployerCityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NgSchoolsDataLayer.Models.Country", "EmployerCountry")
                        .WithMany()
                        .HasForeignKey("EmployerCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NgSchoolsDataLayer.Models.Region", "EmployerRegion")
                        .WithMany()
                        .HasForeignKey("EmployerRegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NgSchoolsDataLayer.Models.UploadedFile", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.StudentClassAttendance", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.StudentGroupClassAttendance", "StudentGroupClassAttendance")
                        .WithMany("StudentClassAttendances")
                        .HasForeignKey("StudentGroupClassAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NgSchoolsDataLayer.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.StudentFiles", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.UploadedFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NgSchoolsDataLayer.Models.Student", "Student")
                        .WithMany("Files")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.StudentGroup", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.ClassLocations", "ClassLocation")
                        .WithMany()
                        .HasForeignKey("ClassLocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NgSchoolsDataLayer.Models.User", "EducationLeader")
                        .WithMany()
                        .HasForeignKey("EducationLeaderId");

                    b.HasOne("NgSchoolsDataLayer.Models.ExamCommission", "ExamCommission")
                        .WithMany()
                        .HasForeignKey("ExamCommissionId");

                    b.HasOne("NgSchoolsDataLayer.Models.EducationProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.StudentGroupClassAttendance", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.StudentGroup", "StudentGroup")
                        .WithMany("StudentGroupClassAttendances")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.StudentGroupSubjectTeachers", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.StudentGroup")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.StudentsInGroups", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.StudentGroup", "StudentGroup")
                        .WithMany("StudentsInGroups")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NgSchoolsDataLayer.Models.Student", "Student")
                        .WithMany("StudentsInGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Subject", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.EducationProgram", "EducationProgram")
                        .WithMany("Subjects")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.Theme", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.Subject", "Subject")
                        .WithMany("Themes")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.UserDetails", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.UploadedFile", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("NgSchoolsDataLayer.Models.UploadedFile", "Signature")
                        .WithMany()
                        .HasForeignKey("SignatureId");

                    b.HasOne("NgSchoolsDataLayer.Models.User", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("NgSchoolsDataLayer.Models.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.UserExamCommission", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.ExamCommission", "ExamCommission")
                        .WithMany("UserExamCommissions")
                        .HasForeignKey("ExamCommissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NgSchoolsDataLayer.Models.User", "User")
                        .WithMany("ExamCommissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NgSchoolsDataLayer.Models.UserRoles", b =>
                {
                    b.HasOne("NgSchoolsDataLayer.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NgSchoolsDataLayer.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
